<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>await和map同时使用的时候出现的坑</title>
    <url>/2022/05/05/await%E5%92%8Cmap%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h5 id="场景回顾"><a href="#场景回顾" class="headerlink" title="场景回顾"></a>场景回顾</h5><p>今天日常搬砖，在用nodejs写一个接口，需要调用外部接口内容，获取完接口数据后，将数据作为参数传递给本地函数A进行处理。遍使用了async和await来处理调用顺序。编写完毕，就在以为一切顺利时，意外发生了。。。<br><strong>代码如下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let orderList = []</span><br><span class="line">let list = [XXXXX,XXXXX,XXXXXX]</span><br><span class="line">let a = list.map(async item =&gt; &#123;</span><br><span class="line">    let info = item.split(&#x27;_&#x27;)</span><br><span class="line">    if (info[3] == &#x27;0.txt&#x27;) &#123;</span><br><span class="line">        let tmp = &#123;</span><br><span class="line">            isdeal: false,</span><br><span class="line">            orderName: info[0],</span><br><span class="line">            username: info[1],</span><br><span class="line">            passwd: info[2],</span><br><span class="line">            idCards: [],</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.idCards = await readFileContent(item)</span><br><span class="line">        orderList.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(orderList)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>期望输出[{xxxx},{xxxx},{xxxx},{xx}]</p>
<p>竟然输出结果是[]</p>
<p>await失效了？？</p>
<p><strong>百试不得期果，百思不得其解！！</strong></p>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>百度老师悄悄来到我身边，低声言语了几声，我拍大腿而起。</p>
<p>map方法其返回结果是一个数组（by the way 可以看一下map的实现，可以使用for循环或者递归来实现）。而async返回的是一个promise对象，所以上述代码执行后变量a存储的是一个promise的数组，orderList.push(tmp)没有被执行。因此需要将返回结果进行执行，orderList才能获取到正确的数据。</p>
<p>要想解决这个问题，就执行一下返回的promise数组就可以了。</p>
<p>能够执行promise数组的就Promise.all了，所以上述代码改为以下内容即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> orderList = []</span><br><span class="line"><span class="keyword">let</span> list = [XXXXX,XXXXX,XXXXXX]</span><br><span class="line"><span class="keyword">await</span> <span class="built_in">Promise</span>.all(list.map(<span class="keyword">async</span> item =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> info = item.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (info[<span class="number">3</span>] == <span class="string">&#x27;0.txt&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = &#123;</span><br><span class="line">            <span class="attr">isdeal</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">orderName</span>: info[<span class="number">0</span>],</span><br><span class="line">            <span class="attr">username</span>: info[<span class="number">1</span>],</span><br><span class="line">            <span class="attr">passwd</span>: info[<span class="number">2</span>],</span><br><span class="line">            <span class="attr">idCards</span>: [],</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.idCards = <span class="keyword">await</span> readFileContent(item)</span><br><span class="line">        orderList.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="built_in">console</span>.log(orderList)</span><br></pre></td></tr></table></figure>

<p>又或者别写装X代码，直接for循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> orderList = []</span><br><span class="line"><span class="keyword">let</span> list = [XXXXX,XXXXX,XXXXXX]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> info = list[i].split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (info[<span class="number">3</span>] == <span class="string">&#x27;0.txt&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = &#123;</span><br><span class="line">            <span class="attr">isdeal</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">orderName</span>: info[<span class="number">0</span>],</span><br><span class="line">            <span class="attr">loginid</span>: info[<span class="number">1</span>],</span><br><span class="line">            <span class="attr">passwd</span>: info[<span class="number">2</span>],</span><br><span class="line">            <span class="attr">idCards</span>: [],</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.idCards = <span class="keyword">await</span> readFileContent(list[i])</span><br><span class="line">        orderList.push(tmp)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(orderList)</span><br></pre></td></tr></table></figure>

<p>当然，这不是坑，是我菜。。。</p>
]]></content>
  </entry>
  <entry>
    <title>javascript中数组的方法分类</title>
    <url>/2022/09/22/javascript%E4%B8%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h4 id="1、简述"><a href="#1、简述" class="headerlink" title="1、简述"></a>1、简述</h4><p>​		之前对于js中数组的了解和运用都是在工作或学习中掌握，并没有对数组的方法进行系统性的学习和总结。最近业务不是很忙，终于有时间对数组相关的知识进行归纳和总结。</p>
<h4 id="2、内容"><a href="#2、内容" class="headerlink" title="2、内容"></a>2、内容</h4><p>​		我把数组中的方法分成以下几类</p>
<ul>
<li><p>创建数组的方法</p>
</li>
<li><p>数组操作的方法</p>
</li>
<li><p>数组内容查询方法</p>
</li>
<li><p>数组遍历方法</p>
</li>
<li><p>数组其他方法</p>
<h5 id="创建数组的方法"><a href="#创建数组的方法" class="headerlink" title="创建数组的方法"></a>创建数组的方法</h5><p>new Array()</p>
<p>[]</p>
<p>数组操作的方法</p>
<p>pop &#x2F;&#x2F;后删除，删除数组的最后一位元素，返回被删除的元素，改变原数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()) <span class="comment">//输出[1,2,3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.pop(<span class="number">7</span>,[<span class="number">8</span>,<span class="number">9</span>])) <span class="comment">//输出[1,2,3,4,5,7,[8,9]]</span></span><br></pre></td></tr></table></figure>

<p>push &#x2F;&#x2F;在元素后面添加元素，返回添加后数组的长度，改变原数组，参数可以是单个值或多个值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">6</span>)) <span class="comment">//输出[1,2,3,4,5,6]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">7</span>,[<span class="number">8</span>,<span class="number">9</span>])) <span class="comment">//输出[1,2,3,4,5,6,7,[8,9]]</span></span><br></pre></td></tr></table></figure>

<p>unshift &#x2F;&#x2F;在数组前面添加元素，返回添加元素的长度，改变原数组，参数可以是单个值或多个值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">7</span>,<span class="number">8</span>)) <span class="comment">//输出7,8,1,2,3,4</span></span><br></pre></td></tr></table></figure>

<p>shift &#x2F;&#x2F;前删除，删除数组第0位的元素，返回被删除的元素，改变原数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let arr = [1,2,3,4]</span><br><span class="line">console.log(arr.shift()) //[2,3,4]</span><br></pre></td></tr></table></figure>

<p>reverse &#x2F;&#x2F;翻转数组的排列顺序</p>
<p>sort &#x2F;&#x2F;对数组进行排列，默认将数组元素内容转为字符串使用unicode编码格式进行比较排序，</p>
<p>​		&#x2F;&#x2F;参数为回调函数，默认当前项和后一项，</p>
<p>slice &#x2F;&#x2F;删除数组中指定位置的元素</p>
<p>splice  &#x2F;&#x2F;删除或插入指定位置的元素</p>
</li>
</ul>
<p>​		</p>
]]></content>
  </entry>
  <entry>
    <title>前端基础知识二刷之html</title>
    <url>/2022/03/30/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%8C%E5%88%B7%E4%B9%8Bhtml/</url>
    <content><![CDATA[<h1 id="html的创建"><a href="#html的创建" class="headerlink" title="html的创建"></a>html的创建</h1><p>​	蒂姆伯纳斯李 万维网之父 1991 w3c 万维网联盟</p>
<h1 id="HTML的三大部分"><a href="#HTML的三大部分" class="headerlink" title="HTML的三大部分"></a>HTML的三大部分</h1><p>​	结构html、表现css、行为js</p>
<h1 id="html的基本结构"><a href="#html的基本结构" class="headerlink" title="html的基本结构"></a>html的基本结构</h1><p>​	html&gt;head&gt;title+body</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><!-- -->

<h1 id="标签中的属性"><a href="#标签中的属性" class="headerlink" title="标签中的属性"></a>标签中的属性</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;yellow&quot;</span> <span class="attr">size</span>=<span class="string">&quot;3&quot;</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">font</span>&gt;</span>网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>font 已不再建议使用</p>
<h1 id="网页的版本迭代"><a href="#网页的版本迭代" class="headerlink" title="网页的版本迭代"></a><strong>网页的版本迭代</strong></h1><p>HTML4</p>
<p>XHTML2.0</p>
<p>HTML5</p>
<h1 id="头部的设置"><a href="#头部的设置" class="headerlink" title="头部的设置"></a>头部的设置</h1><p>文档声明（doctype)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span> 放在最前面，标志网页的版本</span><br></pre></td></tr></table></figure>

<p>​                 <img src="https://docimg2.docs.qq.com/image/3IOjKa18271k3f5VRzW14g.png?w=519&h=122" alt="img">        </p>
<p><mate charset="utf-8"> 设置编码格式，放在head里面</p>
<p>zeal的使用</p>
<p>设置语言<html lang="zh"></p>
<p>转义字符</p>
<p>&amp;nbsp;&amp;gt 大于号;&lt;&amp;copy</p>
<h2 id="meta标签中的属性"><a href="#meta标签中的属性" class="headerlink" title="meta标签中的属性"></a><strong>meta标签中的属性</strong></h2><p>content：数据的值</p>
<p>name：数据的名称 keywords：关键字desciption 描述，显示搜索引擎的内容 </p>
<p>title会作为搜索引擎的超链接</p>
<p>http-equiv：refresh 将页面重定向的另外一个页面</p>
<p>3秒后自动跳转到百度页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;url=http://www.baidu.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h1><p>h1-h6一共6级标题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em></em>强调</p>
<p><strong></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;blockquote&gt;&lt;/blockquote&gt;长引用 鲁迅说：</span><br><span class="line">&lt;q&gt;&lt;/q&gt;短引用</span><br></pre></td></tr></table></figure>

<p>p标签不能放任何标签</p>
<p>header</p>
<p>main</p>
<p>footer</p>
<p>nav 网页中的导航</p>
<p>aside侧边栏</p>
<p>article 表示一个独立的文章</p>
<p>section 表示独立的区块</p>
<p>ul&gt;li</p>
<p>ol&gt;li</p>
<p>dl&gt;dt+dd</p>
<p>a标签：href target </p>
<p>href&#x3D;”#bottom” 时，点击跳转到页面id为bottom的位置,只有#时，滚动到顶部</p>
<p>href&#x3D;”javascript:;” 点击什么都不做</p>
<p>target：_self 、_blank</p>
<h2 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a><strong>img标签</strong></h2><p>替换元素，基于行和块元素之间，但是不独占一行</p>
<p>src属性</p>
<p>alt对图片的描述，默认不显示，有些浏览器在图片无法加载时显示，为搜索引擎查找</p>
<p>width</p>
<p>height</p>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a><strong>iframe</strong></h2><p>src width height frameborder&#x3D;”0”</p>
<h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p>src、</p>
<p>controls 是否可以用户控制</p>
<p>autoplay 自动播放，但是大多数浏览器不会自动播放</p>
<p>loop 循环播放</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span> 对不起您的浏览器不支持 <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./xx.mp3&quot;</span> &gt;</span> <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./xx.ogg&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">height</span>=<span class="string">&quot;70&quot;</span>&gt;</span> ie8以下</span><br></pre></td></tr></table></figure>

<h2 id="vedio"><a href="#vedio" class="headerlink" title="vedio"></a>vedio</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;vedio/mp4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <tags>
        <tag>前端基础</tag>
      </tags>
  </entry>
  <entry>
    <title>基础知识二刷之路由hash和history模式</title>
    <url>/2022/04/01/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BA%8C%E5%88%B7%E4%B9%8B%E8%B7%AF%E7%94%B1hash%E5%92%8Chistory%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="hash模式："><a href="#hash模式：" class="headerlink" title="hash模式："></a>hash模式：</h1><p>先访问index.html物理文件去加载他</p>
<p>然后通过html文件的hash值（也就是#后面的url路径）来匹配对应的组件</p>
<p> 这样的模式使我们在路由跳转时能正常的跳转，并且我们如果刷新页面，也相当于访问了一次index.html他又会按照#号后面的路径重新加载路由页面</p>
<p><strong>本质是利用了window对象的onhashchange事件来监听页面的url路径#后的hash值变化来实现动态的加载html的dom节点</strong></p>
<h1 id="history模式："><a href="#history模式：" class="headerlink" title="history模式："></a>history模式：</h1><p>history模式中的运行原理并不是通过html文件中的锚点功能实现的</p>
<p>他是利用js重写url路径来实现将网页的url地址动态改变而不需要重新加载页面，他的url路径一旦重写了，访问的html文件部分就会被写没，所以他的访问规则并不是默认的文件访问规则，history的访问规则需要服务器预先设定，如果我们定制好了他的规则就是固定的，</p>
<p><strong>本质是利用history.pushState({},’标题’,path)重写url路径而不刷新页面</strong></p>
<p>history模式是先加载本页面的基础上用js动态改变url路径，改过url路径中不包含本页的物理文件，所以会导致刷新更改后的页面，就会导致浏览器找不到原始的本页html文件，所以报404</p>
<p>不建议使用</p>
<p>（后续将继续补充更新）</p>
]]></content>
      <tags>
        <tag>基础知识</tag>
        <tag>路由模式</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2021/02/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>行了，开始我的第一篇博客文档</p>
]]></content>
      <tags>
        <tag>测试</tag>
        <tag>测试2</tag>
        <tag>测试3</tag>
      </tags>
  </entry>
  <entry>
    <title>手写vue源码（一）-- 实现数据代理</title>
    <url>/2022/09/22/%E6%89%8B%E5%86%99vue%E6%BA%90%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1、简述"><a href="#1、简述" class="headerlink" title="1、简述"></a>1、简述</h4><p>​		本次实现vue2中数据代理的实现，数据代理就是传入vue中的参数option中的data数据项，都能在vm对象中实现，修改vm中数据属性，相应的data中的属性值也会发生变化</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	<span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.a = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.data.a)<span class="comment">//输出10</span></span><br></pre></td></tr></table></figure>

<h4 id="2、原理"><a href="#2、原理" class="headerlink" title="2、原理"></a>2、原理</h4><p>​		数据代理的实现依赖于Object.defineProperty方法，该方法接收3个参数，object（需要添加属性的对象），key（需要添加的属性），discriptor（属性的描述）</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.defineProperty(&#123;&#125;,a,&#123;</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        value = val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h4><p>下面开始编写数据代理的实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = options.data</span><br><span class="line">        <span class="built_in">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取data中的key</span></span><br><span class="line">    <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="built_in">this</span>.data)</span><br><span class="line">    <span class="comment">//遍历data中的属性，并挂载到vue对象中</span></span><br><span class="line">    keys.forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>,key,&#123;</span><br><span class="line">            <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data[key]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.data[key] = val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>VUE 源码</tag>
      </tags>
  </entry>
  <entry>
    <title>手写vue源码（二）-- 实现数据劫持</title>
    <url>/2022/09/22/%E6%89%8B%E5%86%99vue%E6%BA%90%E7%A0%81%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1、简述"><a href="#1、简述" class="headerlink" title="1、简述"></a>1、简述</h4><p>​		本次实现数据劫持</p>
]]></content>
      <tags>
        <tag>源码</tag>
      </tags>
  </entry>
</search>
